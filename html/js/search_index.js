var search_data = {"index":{"searchIndex":["metalarchives","apierror","band","iso3166","basemodel","client","configuration","error","invalidconfigurationerror","label","iso3166","middleware","notimplementederror","parsererror","parsers","band","label","parserhelper","range","<=>()","begin?()","boolean()","call()","client()","configure()","end?()","enum()","find()","find_by()","find_by()","find_by_id()","find_by_name()","find_endpoint()","find_endpoint()","map_params()","new()","new()","parse()","parse_country()","parse_genre()","parse_html()","parse_json()","property()","search()","search()","search_by()","search_by()","search_endpoint()","readme"],"longSearchIndex":["metalarchives","metalarchives::apierror","metalarchives::band","metalarchives::band::iso3166","metalarchives::basemodel","metalarchives::client","metalarchives::configuration","metalarchives::error","metalarchives::invalidconfigurationerror","metalarchives::label","metalarchives::label::iso3166","metalarchives::middleware","metalarchives::notimplementederror","metalarchives::parsererror","metalarchives::parsers","metalarchives::parsers::band","metalarchives::parsers::label","metalarchives::parsers::parserhelper","metalarchives::range","metalarchives::range#<=>()","metalarchives::range#begin?()","metalarchives::basemodel::boolean()","metalarchives::middleware#call()","metalarchives::client()","metalarchives::configure()","metalarchives::range#end?()","metalarchives::basemodel::enum()","metalarchives::band::find()","metalarchives::band::find_by()","metalarchives::client#find_by()","metalarchives::client#find_by_id()","metalarchives::label::find_by_name()","metalarchives::parsers::band::find_endpoint()","metalarchives::parsers::label::find_endpoint()","metalarchives::parsers::band::map_params()","metalarchives::basemodel::new()","metalarchives::range::new()","metalarchives::parsers::label::parse()","metalarchives::parsers::parserhelper::parse_country()","metalarchives::parsers::parserhelper::parse_genre()","metalarchives::parsers::band::parse_html()","metalarchives::parsers::band::parse_json()","metalarchives::basemodel::property()","metalarchives::band::search()","metalarchives::label::search()","metalarchives::band::search_by()","metalarchives::client#search_by()","metalarchives::parsers::band::search_endpoint()",""],"info":[["MetalArchives","","MetalArchives.html","",""],["MetalArchives::APIError","","MetalArchives/APIError.html","","<p>Error in backend response\n"],["MetalArchives::Band","","MetalArchives/Band.html","","<p>Represents an band (person or group)\n"],["MetalArchives::Band::ISO3166","","MetalArchives/Band/ISO3166.html","",""],["MetalArchives::BaseModel","","MetalArchives/BaseModel.html","","<p>Base model class all models are derived from\n"],["MetalArchives::Client","","MetalArchives/Client.html","","<p>HTTP request client\n"],["MetalArchives::Configuration","","MetalArchives/Configuration.html","","<p>Contains configuration options\n"],["MetalArchives::Error","","MetalArchives/Error.html","","<p>Generic error\n"],["MetalArchives::InvalidConfigurationError","","MetalArchives/InvalidConfigurationError.html","","<p>No or invalid configuration found\n"],["MetalArchives::Label","","MetalArchives/Label.html","","<p>Represents a record label\n"],["MetalArchives::Label::ISO3166","","MetalArchives/Label/ISO3166.html","",""],["MetalArchives::Middleware","","MetalArchives/Middleware.html","","<p>Faraday middleware\n"],["MetalArchives::NotImplementedError","","MetalArchives/NotImplementedError.html","","<p>Functionality not implemented (yet)\n"],["MetalArchives::ParserError","","MetalArchives/ParserError.html","","<p>Error parsing value\n"],["MetalArchives::Parsers","","MetalArchives/Parsers.html","",""],["MetalArchives::Parsers::Band","","MetalArchives/Parsers/Band.html","","<p>Band parser\n"],["MetalArchives::Parsers::Label","","MetalArchives/Parsers/Label.html","","<p>Label parser\n"],["MetalArchives::Parsers::ParserHelper","","MetalArchives/Parsers/ParserHelper.html","","<p>Parsing utilities\n"],["MetalArchives::Range","","MetalArchives/Range.html","","<p>Range which can start and/or end with <code>nil</code>\n"],["<=>","MetalArchives::Range","MetalArchives/Range.html#method-i-3C-3D-3E","(other)",""],["begin?","MetalArchives::Range","MetalArchives/Range.html#method-i-begin-3F","()","<p>Whether start of range is present\n"],["boolean","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-boolean","(name, opts = {})","<p>Defines a model boolean property. This method is an alias for +enum name,\n:values =&gt; [true, false]+ …\n"],["call","MetalArchives::Middleware","MetalArchives/Middleware.html#method-i-call","(env)",""],["client","MetalArchives","MetalArchives.html#method-c-client","()","<p>Retrieve a Client instance\n"],["configure","MetalArchives","MetalArchives.html#method-c-configure","()","<p>Configure API options.\n<p>A block must be specified, to which a MetalArchives::Configuration\nparameter will …\n"],["end?","MetalArchives::Range","MetalArchives/Range.html#method-i-end-3F","()","<p>Whether end of range is present\n"],["enum","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-enum","(name, opts)","<p>Defines a model enum property.\n<p>name &mdash; Name of the property\n<p>opts &mdash; <p>values &mdash; Required. An array of possible values …\n"],["find","MetalArchives::Band","MetalArchives/Band.html#method-c-find","(id)","<p>Find by ID\n<p>Returns Band\n<p>id &mdash; <code>Integer</code>\n"],["find_by","MetalArchives::Band","MetalArchives/Band.html#method-c-find_by","(query)","<p>Find by attributes\n<p>Returns Band\n<p>Returns first match\n"],["find_by","MetalArchives::Client","MetalArchives/Client.html#method-i-find_by","(model, query)","<p>Find a <code>model</code> using <code>query</code>\n<p>model &mdash; <code>Symbol</code> representing a class &lt; BaseModel\n<p>query &mdash; <code>Hash</code> containing query parameters …\n"],["find_by_id","MetalArchives::Client","MetalArchives/Client.html#method-i-find_by_id","(model, id)","<p>Find a <code>model</code> using ID\n<p>model &mdash; <code>Symbol</code> representing a class &lt; BaseModel\n<p>id &mdash; <code>Integer</code>\n"],["find_by_name","MetalArchives::Label","MetalArchives/Label.html#method-c-find_by_name","(name, id)","<p>Find by name and id.\n<p>Returns Band\n"],["find_endpoint","MetalArchives::Parsers::Band","MetalArchives/Parsers/Band.html#method-c-find_endpoint","(query)",""],["find_endpoint","MetalArchives::Parsers::Label","MetalArchives/Parsers/Label.html#method-c-find_endpoint","(params)",""],["map_params","MetalArchives::Parsers::Band","MetalArchives/Parsers/Band.html#method-c-map_params","(query)","<p>Map attributes to MA attributes\n<p>Returns <code>Hash</code>\n<p>params &mdash; <code>Hash</code>\n"],["new","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-new","(hash = {})","<p>Generic constructor\n"],["new","MetalArchives::Range","MetalArchives/Range.html#method-c-new","(_begin = nil, _end = nil)","<p>Create a new range\n<p>_begin &mdash; Start of range\nDefault: <code>nil</code>\n"],["parse","MetalArchives::Parsers::Label","MetalArchives/Parsers/Label.html#method-c-parse","(response)",""],["parse_country","MetalArchives::Parsers::ParserHelper","MetalArchives/Parsers/ParserHelper.html#method-c-parse_country","(input)","<p>Parse a country\n<p>Returns <code>ISO3166::Country</code>\n"],["parse_genre","MetalArchives::Parsers::ParserHelper","MetalArchives/Parsers/ParserHelper.html#method-c-parse_genre","(input)","<p>Opinionated parsing of genres\n<p>Returns an <code>Array</code> of <code>String</code>\n<p>The following components are omitted:\n"],["parse_html","MetalArchives::Parsers::Band","MetalArchives/Parsers/Band.html#method-c-parse_html","(response)",""],["parse_json","MetalArchives::Parsers::Band","MetalArchives/Parsers/Band.html#method-c-parse_json","(response)",""],["property","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-property","(name, opts = {})","<p>Defines a model property.\n<p>name &mdash; Name of the property\n<p>opts &mdash; <p>type &mdash; Data type of property (a constant)\n"],["search","MetalArchives::Band","MetalArchives/Band.html#method-c-search","(name)","<p>Search by name\n<p>Returns <code>Array</code> of Band\n<p>name &mdash; <code>String</code>\n"],["search","MetalArchives::Label","MetalArchives/Label.html#method-c-search","(name)","<p>Search by name.\n<p>Returns <code>Array</code> of Label\n"],["search_by","MetalArchives::Band","MetalArchives/Band.html#method-c-search_by","(query)","<p>Search by attributes\n<p>Returns <code>Array</code> of Band\n<p>query &mdash; Hash containing one or more of the following keys:\n"],["search_by","MetalArchives::Client","MetalArchives/Client.html#method-i-search_by","(model, query)","<p>Find multiple +model+s using <code>query</code>\n<p>model &mdash; <code>Symbol</code> representing a class &lt; BaseModel\n<p>query &mdash; <code>Hash</code> containing …\n"],["search_endpoint","MetalArchives::Parsers::Band","MetalArchives/Parsers/Band.html#method-c-search_endpoint","(query)",""],["README","","README_md.html","","<p>Metal Archives Web Service Wrapper\n<p>Installation\n\n<pre>$ gem install metal_archives</pre>\n"]]}}